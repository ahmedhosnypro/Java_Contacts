type: edu
custom_name: stage4
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.List;\nimport\
    \ java.util.function.Function;\n\n\nclass TestClue {\n\n    Function<String, CheckResult>\
    \ callback;\n\n    TestClue(Function<String, CheckResult> callback) {\n      \
    \  this.callback = callback;\n    }\n}\n\n\npublic class ContactsTest extends\
    \ StageTest<TestClue> {\n\n    private CheckResult splitActionsFeedback(int actualSize,\
    \ int needSize) {\n        if (actualSize < needSize) {\n            return CheckResult.wrong(String.format(\"\
    This test should contain at least %d actions, but you have only %d. \" +\n   \
    \                         \"You should separate your actions with an empty line.\"\
    ,\n                    needSize,\n                    actualSize));\n        }\
    \ else {\n            return null;\n        }\n    }\n    \n    @Override\n  \
    \  public List<TestCase<TestClue>> generate() {\n        return List.of (\n  \
    \          new TestCase<TestClue>()\n                .setInput(\"exit\")\n   \
    \             .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    enter action\")) {\n                        return new CheckResult(false,\n  \
    \                          \"No \\\"Enter action\\\" substring found in the output\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    0 records\")) {\n                        return new CheckResult(false,\n     \
    \                       \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    } else\
    \ if (infoBlock.contains(\"+0 (123) 456-789-9999\")\n                        \
    \    && infoBlock.contains(\"123 456 789\")\n                            && !infoBlock.contains(\"\
    +0 (123) 456-781-9999\")) {\n                        return CheckResult.correct();\n\
    \                    }\n                }\n                return new CheckResult(false,\n\
    \                        \"Search by phone number is not working\");\n       \
    \     }))\n        );\n    }\n\n    @Override\n    public CheckResult check(String\
    \ reply, TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/validator/GenderValidator.java
  visible: true
  text: |
    package contacts.validator;

    public class GenderValidator {

        public static String validateAndReturn(String input) {
            if (input == null || input.isEmpty()) {
                System.out.println("Bad gender!");
                return "";
            }

            if (isValid(input)) {
                return input;
            }
            return "";
        }

        private static boolean isValid(String input) {
            return input.equals("M") || input.equals("F");
        }
    }
  learner_created: true
- name: src/contacts/contact/person/PersonDetailsFactory.java
  visible: true
  text: |
    package contacts.contact.person;

    import contacts.contact.ContactDetailsFactory;
    import contacts.validator.BirthDateValidator;
    import contacts.validator.GenderValidator;

    import java.time.LocalDateTime;

    import static contacts.Main.SCANNER;

    public class PersonDetailsFactory implements ContactDetailsFactory {

        @Override
        public LocalDateTime addBirthDate() {
            System.out.print("Enter the birth date");
            return BirthDateValidator.getValidDateOrNull(SCANNER.nextLine());
        }

        @Override
        public String addGender() {
            System.out.println("Enter the gender (M, F): ");
            return GenderValidator.validateAndReturn(SCANNER.nextLine());
        }

        @Override
        public String addAddress() {
            return null;
        }
    }
  learner_created: true
- name: src/contacts/contact/organization/OrganizationFactory.java
  visible: true
  text: |
    package contacts.contact.organization;

    import contacts.contact.Contact;
    import contacts.contact.ContactDetailsFactory;
    import contacts.contact.ContactFactory;

    public class OrganizationFactory implements ContactFactory {

        @Override
        public Contact createContact() {
            ContactDetailsFactory contactDetailsFactory = new OrganizationDetailsFactory();
            return new Organization(contactDetailsFactory);
        }
    }
  learner_created: true
- name: src/contacts/database/Dataset.java
  visible: true
  text: |
    package contacts.database;

    import contacts.contact.Contact;

    import java.util.ArrayList;

    public class Dataset {
        private Dataset() {
        }

        private static final ArrayList<Contact> contacts = new ArrayList<>();

        public static int getSize() {
            return contacts.size();
        }

        public static Contact getRecord(int index) {
            return contacts.get(index);
        }

        public static boolean isEmpty() {
            return contacts.isEmpty();
        }

        public static void addContact(Contact contact) {
            contacts.add(contact);
        }

        public static void removeContact(Contact contact) {
            contacts.remove(contact);
        }

        public static String list() {
            if (isEmpty()) {
                return "";
            }

            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < Dataset.getSize(); i++) {
                sb.append(String.format("%d. %s%n", i + 1, Dataset.getRecord(i).toString()));
            }
            return sb.toString().trim();
        }
    }
  learner_created: true
- name: src/contacts/validator/BirthDateValidator.java
  visible: true
  text: |-
    package contacts.validator;

    import java.time.LocalDateTime;
    import java.util.regex.Pattern;

    public class BirthDateValidator {
        private BirthDateValidator() {
        }

        private static final String BIRTH_DATE_REGEX = "([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))";
        private static final Pattern BIRTH_DATE_PATTERN = Pattern.compile(BIRTH_DATE_REGEX);


        private static boolean isValid(String birthDate) {
            return BIRTH_DATE_PATTERN.matcher(birthDate).matches();
        }

        private static final String BAD_BIRTH = "Bad birth date!";


        public static String validateAndReturn(String input) {
            if (input == null || input.isEmpty()) {
                System.out.println(BAD_BIRTH);
                return "";
            }
            if (isValid(input)) {
                return input;
            } else {
                System.out.println(BAD_BIRTH);
                return "";
            }
        }

        public static LocalDateTime getValidDateOrNull(String input) {
            LocalDateTime birthDateTime = null;
            try {
                birthDateTime = LocalDateTime.parse(validateAndReturn(input));
            } catch (Exception e) {
                System.out.println(BAD_BIRTH);
            }
            return birthDateTime;
        }
    }
  learner_created: true
- name: src/contacts/contact/person/Person.java
  visible: true
  text: |
    package contacts.contact.person;

    import contacts.contact.Contact;
    import contacts.contact.ContactDetailsFactory;
    import contacts.validator.BirthDateValidator;
    import contacts.validator.GenderValidator;
    import contacts.validator.PhoneNumberValidator;

    import java.time.LocalDateTime;

    import static contacts.Main.SCANNER;

    public class Person extends Contact {
        protected String nickName;
        protected LocalDateTime birthDate;
        protected String gender;

        public Person(ContactDetailsFactory detailsFactory) {
            super();
            name = detailsFactory.addName();
            nickName = detailsFactory.addSurname();
            birthDate = detailsFactory.addBirthDate();
            gender = detailsFactory.addGender();
            number = detailsFactory.addNumber();
        }

        public void setNickName(String nickName) {
            this.nickName = nickName;
        }

        public void setBirthDate(String birthDate) {

            LocalDateTime birthDateTime = null;
            try {
                birthDateTime = LocalDateTime.parse(BirthDateValidator.validateAndReturn(birthDate));
            } catch (Exception e) {
                System.out.println("Bad birth date!");
            }

            this.birthDate = birthDateTime;
        }

        public void setGender(String gender) {
            this.gender = GenderValidator.validateAndReturn(gender);
        }

        @Override
        public String toString() {
            return (name.isEmpty() ? "" : name + " ") +
                    (nickName.isEmpty() ? "" : nickName + ", ");
        }

        @Override
        public void edit() {
            System.out.println("Select a field (name, surname, birth, gender, number): ");
            String field = SCANNER.nextLine();

            if (isInvalidField(field)) {
                System.out.println("Invalid field!");
                return;
            }

            switch (field) {
                case "name" -> {
                    System.out.print("Enter name: ");
                    setName(SCANNER.nextLine());
                }
                case "surname" -> {
                    System.out.print("Enter surname: ");
                    setNickName(SCANNER.nextLine());
                }
                case "birth" -> {
                    System.out.print("Enter birth date: ");
                    setBirthDate(SCANNER.nextLine());
                }
                case "gender" -> {
                    System.out.println("Enter the gender (M, F): ");
                    setGender(GenderValidator.validateAndReturn(SCANNER.nextLine()));
                }
                case "number" -> {
                    System.out.print("Enter number: ");
                    String inputNumber = SCANNER.nextLine();
                    setNumber(PhoneNumberValidator.validateAndReturn(inputNumber));
                }
                default -> throw new IllegalArgumentException("Invalid field!");
            }
        }

        @Override
        protected boolean isInvalidField(String field) {
            return !field.equals("name") && !field.equals("surname") && !field.equals("birth") &&
                    !field.equals("gender") && !field.equals("number");
        }

        @Override
        public String getInfo() {
            String noData = "[no data]";
            return String.format("""
                            Name: %s
                            Surname: %s
                            Birth date: %s
                            Gender: %s
                            Number: %s
                            Time created: %s
                            Time last edit: %s""",
                    (name == null || name.isEmpty() ? noData : name),
                    (nickName == null || nickName.isEmpty() ? noData : nickName),
                    (birthDate == null ? noData : birthDate.toString()),
                    (gender == null || gender.isEmpty() ? noData : gender),
                    (number == null || number.isEmpty() ? noData : number),
                    (created == null ? noData : created.toString()),
                    (lastEdit == null ? noData : lastEdit.toString()));
        }
    }
  learner_created: true
- name: src/contacts/contact/organization/Organization.java
  visible: true
  text: |
    package contacts.contact.organization;

    import contacts.contact.Contact;
    import contacts.contact.ContactDetailsFactory;
    import contacts.validator.PhoneNumberValidator;

    import static contacts.Main.SCANNER;

    public class Organization extends Contact {
        String address;

        protected Organization(ContactDetailsFactory detailsFactory) {
            super();
            name = detailsFactory.addName();
            address = detailsFactory.addAddress();
            number = detailsFactory.addNumber();
        }

        @Override
        public String toString() {
            return (name.isEmpty() ? "" : name + " ");
        }

        @Override
        public void edit() {
            System.out.print("Select a field (name, address, number): ");
            String field = SCANNER.nextLine();

            if (isInvalidField(field)) {
                System.out.println("Invalid field!");
                return;
            }

            switch (field) {
                case "name" -> {
                    System.out.print("Enter name: ");
                    String inputName = SCANNER.nextLine();
                    setName(inputName);
                }
                case "address" -> {
                    System.out.print("Enter address: ");
                    String inputAddress = SCANNER.nextLine();
                    setAddress(inputAddress);
                }
                case "number" -> {
                    System.out.print("Enter number: ");
                    String inputNumber = SCANNER.nextLine();
                    setNumber(PhoneNumberValidator.validateAndReturn(inputNumber));
                }
                default -> throw new IllegalArgumentException("Invalid field!");
            }

            System.out.println("The record updated!");
        }

        @Override
        protected boolean isInvalidField(String field) {
            return !field.equals("name") && !field.equals("address") && !field.equals("number");
        }

        public void setAddress(String address) {
            this.address = address;
        }

        @Override
        public String getInfo() {
            String noData = "[no data]";
            return String.format("""
                            Organization name: %s
                            Address: %s
                            Number: %s
                            Time created: %s
                            Time last edit: %s""",
                    (name == null || name.isEmpty() ? noData : name),
                    (address == null || address.isEmpty() ? noData : address),
                    (number == null || number.isEmpty() ? noData : number),
                    (created == null ? noData : created.toString()),
                    (lastEdit == null ? noData : lastEdit.toString()));
        }
    }
  learner_created: true
- name: src/contacts/contact/organization/OrganizationDetailsFactory.java
  visible: true
  text: |-
    package contacts.contact.organization;

    import contacts.contact.ContactDetailsFactory;

    import java.time.LocalDateTime;

    import static contacts.Main.SCANNER;

    public class OrganizationDetailsFactory implements ContactDetailsFactory {

        @Override
        public LocalDateTime addBirthDate() {
            return null;
        }

        @Override
        public String addGender() {
            return null;
        }

        @Override
        public String addAddress() {
            System.out.print("Enter the address: ");
            return SCANNER.nextLine();
        }
    }
  learner_created: true
- name: src/contacts/validator/NameValidator.java
  visible: true
  text: |
    package contacts.validator;

    public class NameValidator {
        public static String validateAndReturn(String input) {
            if (input == null || input.isEmpty()) {
                System.out.println("Bad name!");
                return "";
            }
            return input;
        }
    }
  learner_created: true
- name: src/contacts/contact/ContactDetailsFactory.java
  visible: true
  text: |
    package contacts.contact;

    import contacts.validator.BirthDateValidator;
    import contacts.validator.PhoneNumberValidator;

    import java.time.LocalDateTime;

    import static contacts.Main.SCANNER;

    public interface ContactDetailsFactory {

        default String addName() {
            System.out.print("Enter the name: ");
            return SCANNER.nextLine();
        }

        default String addSurname() {
            System.out.print("Enter the surname: ");
            return SCANNER.nextLine();
        }

        LocalDateTime addBirthDate();

        String addGender();

        String addAddress();

        default String addNumber() {
            System.out.print("Enter the number: ");
            var number = SCANNER.nextLine();
            return PhoneNumberValidator.validateAndReturn(number);
        }
    }
  learner_created: true
- name: src/contacts/contact/ContactFactory.java
  visible: true
  text: |
    package contacts.contact;

    public interface ContactFactory {
        Contact createContact();
    }
  learner_created: true
- name: src/contacts/contact/Contact.java
  visible: true
  text: |
    package contacts.contact;

    import contacts.validator.PhoneNumberValidator;

    import java.time.LocalDateTime;

    public abstract class Contact {
        protected String name;
        protected String number;
        protected final LocalDateTime created;
        protected LocalDateTime lastEdit;

        protected Contact() {
            lastEdit = created = LocalDateTime.now();
        }

        public void setName(String name) {
            this.name = name;
        }

        public void setNumber(String number) {
            this.number = PhoneNumberValidator.validateAndReturn(number);
        }

        public abstract void edit();

        protected abstract boolean isInvalidField(String field);

        public void setLastEdit(LocalDateTime lastEdit) {
            this.lastEdit = lastEdit;
        }

        public abstract String getInfo();
    }
  learner_created: true
- name: src/contacts/validator/PhoneNumberValidator.java
  visible: true
  text: |
    package contacts.validator;

    import java.util.regex.Pattern;

    public class PhoneNumberValidator {

        private PhoneNumberValidator() {
        }

        /*
         * The phone number should be split into groups using a space or dash. One group is also possible.
         * Before the first group, there may or may not be a plus symbol.
         * The first group or the second group can be wrapped in parentheses,
         * but there should be no more than one group which is wrapped in parentheses.
         * There may be no groups wrapped in parentheses.
         * A group can contain numbers, uppercase, and lowercase English letters.
         * A group should be at least 2 symbols in length. But the first group may be only one symbol in length.
         * */

        private static final String PHONE_NUMBER_REGEX = "^\\+?([\\da-zA-Z]+[\\s-]?)?" +
                "(\\([\\da-zA-Z]{2,}(\\)[\\s-]|\\)$))?" +
                "([\\da-zA-Z]{2,}[\\s-]?)*([\\da-zA-Z]{2,})?$";
        private static final Pattern PHONE_NUMBER_PATTERN = Pattern.compile(PHONE_NUMBER_REGEX);

        private static boolean isValid(String phoneNumber) {
            return PHONE_NUMBER_PATTERN.matcher(phoneNumber).matches();
        }


        public static String validateAndReturn(String input) {
            if (input == null || input.isEmpty()) {
                System.out.println("Bad birth date!");
                return "";
            }

            if (isValid(input)) {
                return input;
            } else {
                System.out.println("Wrong number format!");
                return "";
            }
        }
    }
  learner_created: true
- name: src/contacts/contact/person/PersonFactory.java
  visible: true
  text: |
    package contacts.contact.person;

    import contacts.contact.Contact;
    import contacts.contact.ContactDetailsFactory;
    import contacts.contact.ContactFactory;

    public class PersonFactory implements ContactFactory {
        @Override
        public Contact createContact() {
            ContactDetailsFactory detailsFactory = new PersonDetailsFactory();
            return new Person(detailsFactory);
        }
    }
  learner_created: true
- name: src/contacts/cli/command/ListCommand.java
  visible: true
  learner_created: true
- name: src/contacts/cli/command/AddCommand.java
  visible: true
  text: |
    package contacts.cli;

    import contacts.contact.Contact;
    import contacts.contact.ContactFactory;
    import contacts.contact.organization.OrganizationFactory;
    import contacts.contact.person.PersonFactory;
    import contacts.database.Dataset;

    import static contacts.Main.SCANNER;

    public class AddCommand extends CliCommand {

        @Override
        public void execute() {
            System.out.println("Enter the type (person, organization): ");
            String type = SCANNER.nextLine();
            if (!isValidType(type)) {
                System.out.println("Invalid type!");
                return;
            }

            ContactFactory contactFactory;
            switch (type) {
                case "person" -> contactFactory = new PersonFactory();
                case "organization" -> contactFactory = new OrganizationFactory();
                default -> throw new IllegalArgumentException("Invalid type!");
            }

            Contact contact = contactFactory.createContact();
            Dataset.addContact(contact);

            System.out.println("The record added.\n");
        }

        private boolean isValidType(String type) {
            return type.equals("person") || type.equals("organization");
        }
    }
  learner_created: true
- name: src/contacts/cli/command/CountCommand.java
  visible: true
  text: |
    package contacts.cli;

    import contacts.database.Dataset;

    public class CountCommand extends CliCommand {
        public void execute() {
            System.out.printf("The Phone Book has %d records.%n%n", Dataset.getSize());
        }
    }
  learner_created: true
- name: src/contacts/cli/command/ExitCommand.java
  visible: true
  text: |
    package contacts.cli;

    public class ExitCommand extends CliCommand {
        @Override
        void execute() {
        }
    }
  learner_created: true
- name: src/contacts/cli/command/CliCommandController.java
  visible: true
  text: |
    package contacts.cli;

    public class CliCommandController {
        private CliCommand cliCommand;

        public void executeCommand() {
            cliCommand.execute();
        }

        public void setCliCommand(CliCommand cliCommand) {
            this.cliCommand = cliCommand;
        }
    }
  learner_created: true
- name: src/contacts/cli/command/SearchCommand.java
  visible: true
  learner_created: true
- name: src/contacts/cli/CLI.java
  visible: true
  learner_created: true
- name: src/contacts/cli/command/Command.java
  visible: true
  learner_created: true
- name: src/contacts/cli/menu/MainMenu.java
  visible: true
  text: |
    package contacts.cli;

    import static contacts.Main.SCANNER;

    public class CLI {
        private static final CliCommandController controller = new CliCommandController();

        private CLI() {
        }

        public static void start() {
            boolean isRunning = true;
            while (isRunning) {
                isRunning = mainMenu();
            }
        }

        private static boolean mainMenu() {
            System.out.print("Enter action (add, remove, edit, count, list, exit): ");
            String action = SCANNER.nextLine();

            if (!isValidAction(action)) {
                System.out.println("Unknown action!");
                return true;
            }

            controller.setCliCommand(
                    switch (action) {
                        case "remove" -> new RemoveCommand();
                        case "edit" -> new EditCommand();
                        case "count" -> new CountCommand();
                        case "info" -> new InfoCommand();
                        case "exit" -> new ExitCommand();
                        default -> new AddCommand();
                    }
            );
            controller.executeCommand();
            return !action.equals("exit");
        }

        private static boolean isValidAction(String action) {
            return action.equals("add") || action.equals("remove") ||
                    action.equals("edit") || action.equals("count") ||
                    action.equals("info") || action.equals("exit");
        }
    }
  learner_created: true
- name: src/contacts/cli/menu/RecordMenu.java
  visible: true
  learner_created: true
- name: src/contacts/cli/menu/ListMenu.java
  visible: true
  learner_created: true
- name: src/contacts/cli/menu/Menu.java
  visible: true
  learner_created: true
- name: src/contacts/cli/menu/SearchMenu.java
  visible: true
  learner_created: true
- name: src/contacts/cli/Utiltly.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5327#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 16 Jul 2022 16:08:18 UTC
record: 4
