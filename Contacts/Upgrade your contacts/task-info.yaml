type: edu
custom_name: stage3
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.List;\nimport\
    \ java.util.function.Function;\n\n\nclass TestClue {\n\n    Function<String, CheckResult>\
    \ callback;\n\n    TestClue(Function<String, CheckResult> callback) {\n      \
    \  this.callback = callback;\n    }\n}\n\n\npublic class ContactsTest extends\
    \ StageTest<TestClue> {\n\n    private CheckResult splitActionsFeedback(int actualSize,\
    \ String... actions) {\n        if (actualSize != actions.length) {\n        \
    \    return CheckResult.wrong(String.format(\"This test should contain %d actions:\
    \ %s. \" +\n                            \"You should separate your actions with\
    \ an empty line.\",\n                    actions.length,\n                   \
    \ String.join(\", \", actions)));\n        } else {\n            return null;\n\
    \        }\n    }\n\n    @Override\n    public List<TestCase<TestClue>> generate()\
    \ {\n        return List.of (\n            new TestCase<TestClue>()\n        \
    \        .setInput(\"exit\")\n                .setAttach(new TestClue(output ->\
    \ {\n                    output = output.strip().toLowerCase();\n            \
    \        if (!output.contains(\"enter action\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"Enter action\\\"\
    \ substring found in the output\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"count\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"0 records\")) {\n                        return new CheckResult(false,\n\
    \                            \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"edit\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (!output.contains(\"no records to edit\")) {\n                \
    \        return new CheckResult(false,\n                            \"No \\\"\
    No records to edit\\\" substring found in the output\");\n                   \
    \ }\n                    return CheckResult.correct();\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"count\\n\" +\n                    \"remove\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"no records to remove\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"No records to remove\\\
    \" substring found in the output\");\n                    }\n                \
    \    return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"count\\n\" +\n                    \"exit\")\n               \
    \ .setAttach(new TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (output.contains(\"0 records\")) {\n                 \
    \       return new CheckResult(false,\n                            \"Can't add\
    \ the person\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"info\\n\"\
    \ +\n                        \"1\\n\" +\n                    \"exit\")\n     \
    \           .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, \"add\", \"info\", \"\
    exit\");\n                    if (feedback != null) return feedback;\n       \
    \             \n                    String infoBlock = blocks[1];\n          \
    \          if (!infoBlock.contains(\"Name: John\")\n                        ||\
    \ !infoBlock.contains(\"Surname: Smith\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Something wrong with printing user info\");\n                    }\n   \
    \                 return CheckResult.correct();\n                })),\n\n    \
    \        new TestCase<TestClue>()\n                .setInput(\n              \
    \      \"add\\n\" +\n                        \"organization\\n\" +\n         \
    \               \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"info\\n\" +\n                        \"1\\n\" +\n                    \"\
    exit\")\n                .setAttach(new TestClue(output -> {\n               \
    \     String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n \
    \                   var feedback = splitActionsFeedback(blocks.length, \"add\"\
    , \"info\", \"exit\");\n                    if (feedback != null) return feedback;\n\
    \                    \n                    String infoBlock = blocks[1];\n   \
    \                 if (!infoBlock.contains(\"Organization name: Pizza Shop\")\n\
    \                        || !infoBlock.contains(\"Address: Wall St. 1\")\n   \
    \                     || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Something\
    \ wrong with printing organization info\");\n                    }\n         \
    \           return CheckResult.correct();\n                })),\n\n          \
    \  new TestCase<TestClue>()\n                .setInput(\n                    \"\
    add\\n\" +\n                        \"person\\n\" +\n                        \"\
    John\\n\" +\n                        \"Smith\\n\" +\n                        \"\
    \\n\" +\n                        \"\\n\" +\n                        \"123 456\
    \ 789\\n\" +\n                    \"edit\\n\" +\n                        \"1\\\
    n\" +\n                        \"gender\\n\" +\n                        \"M\\\
    n\" +\n                    \"info\\n\" +\n                        \"1\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith\")\n        \
    \                || !infoBlock.contains(\"Birth date: [no data]\")\n         \
    \               || !infoBlock.contains(\"Gender: M\")\n                      \
    \  || !infoBlock.contains(\"Number: 123 456 789\")\n                        ||\
    \ !infoBlock.contains(\"Time created:\")\n                        || !infoBlock.contains(\"\
    Time last edit:\")) {\n                        return new CheckResult(false,\n\
    \                            \"Editing person gender is not working\");\n    \
    \                }\n                    return CheckResult.correct();\n      \
    \          })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"person\\n\" +\n \
    \                       \"John2\\n\" +\n                        \"Smith2\\n\"\
    \ +\n                        \"\\n\" +\n                        \"\\n\" +\n  \
    \                      \"123 456 789\\n\" +\n                    \"edit\\n\" +\n\
    \                        \"1\\n\" +\n                        \"name\\n\" +\n \
    \                       \"John3\\n\" +\n                    \"info\\n\" +\n  \
    \                      \"1\\n\" +\n                    \"exit\")\n           \
    \     .setAttach(new TestClue(output -> {\n                    String[] blocks\
    \ = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n                    var\
    \ feedback = splitActionsFeedback(blocks.length, \"add\", \"edit\", \"info\",\
    \ \"exit\");\n                    if (feedback != null) return feedback;\n   \
    \                 \n                    String infoBlock = blocks[2];\n      \
    \              if (!infoBlock.contains(\"Name: John3\")\n                    \
    \    || !infoBlock.contains(\"Surname: Smith2\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Editing person name is not working\");\n                    }\n        \
    \            return CheckResult.correct();\n                })),\n\n         \
    \   new TestCase<TestClue>()\n                .setInput(\n                   \
    \ \"add\\n\" +\n                        \"person\\n\" +\n                    \
    \    \"John2\\n\" +\n                        \"Smith2\\n\" +\n               \
    \         \"\\n\" +\n                        \"\\n\" +\n                     \
    \   \"123 456 789\\n\" +\n                    \"edit\\n\" +\n                \
    \        \"1\\n\" +\n                        \"number\\n\" +\n               \
    \         \"321 654 978\\n\" +\n                    \"info\\n\" +\n          \
    \              \"1\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John2\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith2\")\n       \
    \                 || !infoBlock.contains(\"Birth date: [no data]\")\n        \
    \                || !infoBlock.contains(\"Gender: [no data]\")\n             \
    \           || !infoBlock.contains(\"Number: 321 654 978\")\n                \
    \        || !infoBlock.contains(\"Time created:\")\n                        ||\
    \ !infoBlock.contains(\"Time last edit:\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Editing person number\
    \ is not working\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"Pizza Shop\\n\" +\n                        \"\
    Wall St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"edit\\n\" +\n                        \"1\\n\" +\n       \
    \                 \"address\\n\" +\n                        \"Wall St 2\\n\" +\n\
    \                    \"info\\n\" +\n                        \"1\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Organization name:\
    \ Pizza Shop\")\n                        || !infoBlock.contains(\"Address: Wall\
    \ St 2\")\n                        || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization address is not working\");\n                    }\n           \
    \         return CheckResult.correct();\n                })),\n\n            new\
    \ TestCase<TestClue>()\n                .setInput(\n                    \"add\\\
    n\" +\n                        \"organization\\n\" +\n                       \
    \ \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\" +\n         \
    \               \"+0 (123) 456-789-9999\\n\" +\n                    \"edit\\n\"\
    \ +\n                        \"1\\n\" +\n                        \"number\\n\"\
    \ +\n                        \"+0 (123) 456-789-12345\\n\" +\n               \
    \     \"info\\n\" +\n                        \"1\\n\" +\n                    \"\
    exit\")\n                .setAttach(new TestClue(output -> {\n               \
    \     String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n \
    \                   var feedback = splitActionsFeedback(blocks.length, \"add\"\
    , \"edit\", \"info\", \"exit\");\n                    if (feedback != null) return\
    \ feedback;\n                    \n                    String infoBlock = blocks[2];\n\
    \                    if (!infoBlock.contains(\"Organization name: Pizza Shop\"\
    )\n                        || !infoBlock.contains(\"Address: Wall St. 1\")\n \
    \                       || !infoBlock.contains(\"Number: +0 (123) 456-789-12345\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization number is not working\");\n                    }\n            \
    \        return CheckResult.correct();\n                }))\n        );\n    }\n\
    \n    @Override\n    public CheckResult check(String reply, TestClue clue) {\n\
    \        try {\n            return clue.callback.apply(reply);\n        }\n  \
    \      catch (Exception ex) {\n            return new CheckResult(false, \"Can't\
    \ check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/cli/CliCommandController.java
  visible: true
  text: |
    package contacts.cli;

    public class CliCommandController {
        private CliCommand cliCommand;

        public void executeCommand() {
            cliCommand.execute();
        }

        public void setCliCommand(CliCommand cliCommand) {
            this.cliCommand = cliCommand;
        }
    }
  learner_created: true
- name: src/contacts/cli/CountCommand.java
  visible: true
  text: |
    package contacts.cli;

    import contacts.database.Dataset;

    public class CountCommand extends CliCommand {
        public void execute() {
            System.out.printf("The Phone Book has %d records.%n", Dataset.getSize());
        }
    }
  learner_created: true
- name: src/contacts/cli/RemoveCommand.java
  visible: true
  text: |
    package contacts.cli;

    import contacts.database.Dataset;

    public class RemoveCommand extends CliCommand {
        @Override
        public void execute() {
            if (Dataset.isEmpty()) {
                System.out.println("No records to remove!");
                return;
            }

            int index = readRecordIndex();

            removeRecord(index);
        }

        private void removeRecord(int recordIndex) {
            Dataset.removeContact(Dataset.getRecord(recordIndex));
            System.out.println("The record removed!");
        }
    }
  learner_created: true
- name: src/contacts/cli/CLI.java
  visible: true
  text: |
    package contacts.cli;

    import static contacts.Main.SCANNER;

    public class CLI {
        private static final CliCommandController controller = new CliCommandController();

        private CLI() {
        }

        public static void start() {
            boolean isRunning = true;
            while (isRunning) {
                isRunning = mainMenu();
            }
        }

        private static boolean mainMenu() {
            System.out.print("Enter action (add, remove, edit, count, list, exit): ");
            String action = SCANNER.nextLine();

            if (!isValidAction(action)) {
                System.out.println("Unknown action!");
                return true;
            }

            controller.setCliCommand(
                    switch (action) {
                        default -> new AddCommand();
                        case "remove" -> new RemoveCommand();
                        case "edit" -> new EditCommand();
                        case "count" -> new CountCommand();
                        case "list" -> new ListCommand();
                        case "exit" -> new ExitCommand();
                    }
            );
            controller.executeCommand();
            return !action.equals("exit");
        }

        private static boolean isValidAction(String action) {
            return action.equals("add") || action.equals("remove") ||
                    action.equals("edit") || action.equals("count") ||
                    action.equals("list") || action.equals("exit");
        }
    }
  learner_created: true
- name: src/contacts/cli/ExitCommand.java
  visible: true
  text: |
    package contacts.cli;

    public class ExitCommand extends CliCommand {
        @Override
        void execute() {
        }
    }
  learner_created: true
- name: src/contacts/database/Dataset.java
  visible: true
  text: |
    package contacts.database;

    import contacts.contact.Contact;

    import java.util.ArrayList;

    public class Dataset {
        private Dataset() {
        }

        private static final ArrayList<Contact> contacts = new ArrayList<>();

        public static int getSize() {
            return contacts.size();
        }

        public static Contact getRecord(int index) {
            return contacts.get(index);
        }

        public static boolean isEmpty() {
            return contacts.isEmpty();
        }

        public static void addContact(Contact contact) {
            contacts.add(contact);
        }

        public static void removeContact(Contact contact) {
            contacts.remove(contact);
        }

        public static void removeAllContacts() {
            contacts.clear();
        }

        public static boolean containsContact(Contact contact) {
            return contacts.contains(contact);
        }
    }
  learner_created: true
- name: src/contacts/cli/EditCommand.java
  visible: true
  text: |
    package contacts.cli;

    import contacts.database.Dataset;

    import static contacts.Main.SCANNER;

    public class EditCommand extends CliCommand {
        @Override
        public void execute() {
            if (Dataset.isEmpty()) {
                System.out.println("No records to edit!");
                return;
            }

            int index = readRecordIndex();

            editRecord(index);
        }

        private void editRecord(int recordIndex) {
            System.out.print("Select a field (name, surname, number): ");
            String field = SCANNER.nextLine();

            if (!isValidField(field)) {
                System.out.println("Invalid field!");
                return;
            }

            switch (field) {
                case "name" -> {
                    System.out.print("Enter name: ");
                    String name = SCANNER.nextLine();
                    Dataset.getRecord(recordIndex).setName(name);
                }
                case "surname" -> {
                    System.out.print("Enter surname: ");
                    String surname = SCANNER.nextLine();
                    Dataset.getRecord(recordIndex).setSurname(surname);
                }
                case "number" -> {
                    System.out.print("Enter number: ");
                    String number = SCANNER.nextLine();
                    Dataset.getRecord(recordIndex).setNumber(number);
                }
                default -> {
                }
            }

            System.out.println("The record updated!");
        }

        private boolean isValidField(String field) {
            return field.equals("name") || field.equals("surname") || field.equals("number");
        }
    }
  learner_created: true
- name: src/contacts/cli/AddCommand.java
  visible: true
  text: |
    package contacts.cli;

    import contacts.contact.Contact;
    import contacts.database.Dataset;

    import static contacts.Main.SCANNER;

    public class AddCommand extends CliCommand {
        @Override
        public void execute() {
            System.out.print("Enter the name: ");
            String name = SCANNER.nextLine();

            System.out.print("Enter the surname: ");
            String surname = SCANNER.nextLine();

            System.out.print("Enter the number: ");
            String number = SCANNER.nextLine();

            Contact contact = new Contact(name, surname, number);
            Dataset.addContact(contact);

           System.out.println("The record added.");
        }
    }
  learner_created: true
- name: src/contacts/contact/Contact.java
  visible: true
  text: |
    package contacts.contact;

    public class Contact {
        protected String name;
        protected String surname;
        protected String number;

        public Contact(String name, String surname, String number) {
            this.name = name;
            this.surname = surname;
            this.number = PhoneNumberValidator.validateAndReturn(number);
        }

        //getters & setters for properties
        public String getName() {
            return name;
        }

        public String getSurname() {
            return surname;
        }

        public String getNumber() {
            return number;
        }

        public void setName(String name) {
            this.name = name;
        }

        public void setSurname(String surname) {
            this.surname = surname;
        }

        public void setNumber(String number) {
            this.number = PhoneNumberValidator.validateAndReturn(number);
        }

        @Override
        public String toString() {
            return (name.isEmpty() ? "" : name + " ") +
                    (surname.isEmpty() ? "" : surname + ", ") +
                    (number.isEmpty() ? "[no number]" : number);
        }
    }
  learner_created: true
- name: src/contacts/cli/CliCommand.java
  visible: true
  text: |
    package contacts.cli;

    import contacts.database.Dataset;

    import static contacts.Main.SCANNER;

    public abstract class CliCommand {
        abstract void execute();

        int readRecordIndex() {
            new ListCommand().execute();
            System.out.print("Select a record: ");
            return getValidIndex();
        }

        int getValidIndex() {
            int index = readInt() - 1;
            while (!isValidIndex(index)) {
                System.out.print("Invalid index! Try again: ");
                index = readInt() - 1;
            }
            return index;
        }

        boolean isValidIndex(int index) {
            return index >= 0 && index < Dataset.getSize();
        }

        int readInt() {
            while (true) {
                try {
                    return Integer.parseInt(SCANNER.nextLine());
                } catch (NumberFormatException e) {
                    System.out.print("Invalid input! Try again: ");
                }
            }
        }
    }
  learner_created: true
- name: src/contacts/contact/organization/Organization.java
  visible: true
  learner_created: true
- name: src/contacts/contact/person/Person.java
  visible: true
  learner_created: true
- name: src/contacts/contact/ContactFactory.java
  visible: true
  learner_created: true
- name: src/contacts/contact/person/PersonFactory.java
  visible: true
  learner_created: true
- name: src/contacts/contact/ContactDetailsFactory.java
  visible: true
  learner_created: true
- name: src/contacts/contact/organization/OrganizationDetailsFactory.java
  visible: true
  learner_created: true
- name: src/contacts/contact/person/PersonDetailsFactory.java
  visible: true
  learner_created: true
- name: src/contacts/validator/PhoneNumberValidator.java
  visible: true
  text: |
    package contacts.contact;

    import java.util.regex.Pattern;

    public class PhoneNumberValidator {
        private PhoneNumberValidator() {
        }

        /*
         * The phone number should be split into groups using a space or dash. One group is also possible.
         * Before the first group, there may or may not be a plus symbol.
         * The first group or the second group can be wrapped in parentheses,
         * but there should be no more than one group which is wrapped in parentheses.
         * There may be no groups wrapped in parentheses.
         * A group can contain numbers, uppercase, and lowercase English letters.
         * A group should be at least 2 symbols in length. But the first group may be only one symbol in length.
         * */

        private static final String PHONE_NUMBER_REGEX = "^\\+?([\\da-zA-Z]+[\\s-]?)?" +
                "(\\([\\da-zA-Z]{2,}(\\)[\\s-]|\\)$))?" +
                "([\\da-zA-Z]{2,}[\\s-]?)*([\\da-zA-Z]{2,})?$";
        private static final Pattern PHONE_NUMBER_PATTERN = Pattern.compile(PHONE_NUMBER_REGEX);

        private static boolean validate(String phoneNumber) {
            return PHONE_NUMBER_PATTERN.matcher(phoneNumber).matches();
        }

        public static String validateAndReturn(String phoneNumber) {
            if (validate(phoneNumber)) {
                return phoneNumber;
            } else {
                System.out.println("Wrong number format!");
                return "";
            }
        }
    }
  learner_created: true
- name: src/contacts/contact/organization/OrganizationFactory.java
  visible: true
  learner_created: true
- name: src/contacts/cli/InfoCommand.java
  visible: true
  learner_created: true
- name: src/contacts/validator/GenderValidator.java
  visible: true
  learner_created: true
- name: src/contacts/validator/BirthDateValidator.java
  visible: true
  learner_created: true
- name: src/contacts/validator/NameValidator.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5326#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 16 Jul 2022 11:30:59 UTC
record: -1
